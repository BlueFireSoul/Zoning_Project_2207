# set working directory to directory containing source file
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# read configuration file
current_user <- Sys.info()["user"]
config_file <- glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r")
if (file.exists(config_file)) source(config_file)
# define county codes to filter blocks
sf_counties <- c("001", "013", "041", "047", "055", "069", "075", "077", "081", "085", "087", "095", "097", "099")
# read block shapefile and filter to specified counties
block_sf <- st_read(c) %>%
subset(COUNTYFP10 %in% sf_counties)
# library(glue)
# library(sf)
#
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# current_user <- Sys.info()["user"]
# source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
#
# sf_counties <- c("001", "013", "041", "047", "055", "069", "075", "077", "081", "085", "087", "095", "097", "099")
#
# shapefile <- st_read(block2010_shp) %>%
#   subset(COUNTYFP10 %in% sf_counties)
#
# chunk_size <- 10000
#
# property_sf <- readRDS(property_c_fadj_rds) %>%
#   st_as_sf(coords = c("col49", "col48"), crs = 4326) %>%
#   st_transform(st_crs(shapefile))
# nrows <- nrow(property_sf)
#
# for (i in seq(1, nrows, chunk_size)) {
#   chunk <- property_sf[i:min(i+chunk_size-1, nrows),]
#   intersect <- st_intersection(chunk, shapefile)
#   if (i == 1) {
#     saveRDS(intersect, file = property_c_block_rds)
#   } else {
#     saveRDS(intersect, file = property_c_block_rds, append = TRUE)
#   }
#   current_round <- ceiling(i/chunk_size)
#   total_rounds <- ceiling(nrows/chunk_size)
#   print(sprintf("Round %d of %d", current_round, total_rounds))
# }
library(glue)
library(sf)
# set working directory to directory containing source file
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# read configuration file
current_user <- Sys.info()["user"]
config_file <- glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r")
if (file.exists(config_file)) source(config_file)
# define county codes to filter blocks
sf_counties <- c("001", "013", "041", "047", "055", "069", "075", "077", "081", "085", "087", "095", "097", "099")
# read block shapefile and filter to specified counties
block_sf <- st_read(c) %>%
subset(COUNTYFP10 %in% sf_counties)
# library(glue)
# library(sf)
#
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# current_user <- Sys.info()["user"]
# source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
#
# sf_counties <- c("001", "013", "041", "047", "055", "069", "075", "077", "081", "085", "087", "095", "097", "099")
#
# shapefile <- st_read(block2010_shp) %>%
#   subset(COUNTYFP10 %in% sf_counties)
#
# chunk_size <- 10000
#
# property_sf <- readRDS(property_c_fadj_rds) %>%
#   st_as_sf(coords = c("col49", "col48"), crs = 4326) %>%
#   st_transform(st_crs(shapefile))
# nrows <- nrow(property_sf)
#
# for (i in seq(1, nrows, chunk_size)) {
#   chunk <- property_sf[i:min(i+chunk_size-1, nrows),]
#   intersect <- st_intersection(chunk, shapefile)
#   if (i == 1) {
#     saveRDS(intersect, file = property_c_block_rds)
#   } else {
#     saveRDS(intersect, file = property_c_block_rds, append = TRUE)
#   }
#   current_round <- ceiling(i/chunk_size)
#   total_rounds <- ceiling(nrows/chunk_size)
#   print(sprintf("Round %d of %d", current_round, total_rounds))
# }
library(glue)
library(sf)
# set working directory to directory containing source file
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# read configuration file
current_user <- Sys.info()["user"]
config_file <- glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r")
if (file.exists(config_file)) source(config_file)
# define county codes to filter blocks
sf_counties <- c("001", "013", "041", "047", "055", "069", "075", "077", "081", "085", "087", "095", "097", "099")
# read block shapefile and filter to specified counties
block_sf <- st_read(block2010_shp) %>%
subset(COUNTYFP10 %in% sf_counties)
# create spatial index for block shapefile
block_sfc <- st_as_sfc(block_sf)
block_sidx <- st_as_spatial_index(block_sfc)
# create spatial index for block shapefile
block_sfc <- st_sfc(block_sf)
# create spatial index for block shapefile
block_sfc <- st_sfc(block_sf)
packageVersion("sf")
remove.packages("sf")
install.packages("sf")
install.packages("sf")
library(sf)
st_s2_cell_index
st_s2_cell_index()
st_sfc()
st_sfc_index()
st_sindex()
st_sfc()
st_set_spatial_index()
st_create_index()
st_rtree()
st_quadtree()
install.packages("lwgeom")
st_as_sfc()
library(lwgeom)
st_as_sfc()
st_quadtree()
st_set_spatial_index()
st_create_index()
install.packages("readr")
library(glue)
library(sf)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
sf_counties <- c("001", "013", "041", "047", "055", "069", "075", "077", "081", "085", "087", "095", "097", "099")
shapefile <- readRDS("my_data.rds")
#
View(shapefile)
View(shapefile)
shapefile <- readRDS("my_data.rds")
View(shapefile)
library(glue)
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE)
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = floor(censusID/1e9))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = floor(censusID))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(censusID = as.integer(censusID))%>%
mutate(state = floor(censusID/1e9))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(censusID = as.numeric(censusID))%>%
mutate(state = floor(censusID/1e9))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(censusID = as.numeric(censusID))%>%
mutate(state = floor(censusID/1e9))%>%
mutate(county = floor(censusID/1e6) - state * 1e3)
View(aei_land)
install.packages("stringr")
install.packages("stringr")
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 5))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
mutate(state = str_sub(censusID, start = 4, end = 5))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
mutate(county = str_sub(censusID, start = 4, end = 5)) %>%
mutate(tract = str_sub(censusID, start = 6, end = 11))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
mutate(county = str_sub(censusID, start = 4, end = 5)) %>%
mutate(tract = str_sub(censusID, start = 6, end = 11)) %>%
filter(year = 2019) %>%
mutate(tractID19 = paste0(state,county))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
mutate(county = str_sub(censusID, start = 4, end = 5)) %>%
mutate(tract = str_sub(censusID, start = 6, end = 11)) %>%
filter(year == 2019) %>%
mutate(tractID19 = paste0(state,county))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value = X6, land_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
mutate(county = str_sub(censusID, start = 4, end = 5)) %>%
mutate(tract = str_sub(censusID, start = 6, end = 11)) %>%
filter(year == 2019) %>%
mutate(tractID19 = paste0(state,county,tract))
View(aei_land)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value_ac = X5, land_value_lot = X6, land_cost_share = X7) %>%
mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
mutate(county = str_sub(censusID, start = 4, end = 5)) %>%
mutate(tract = str_sub(censusID, start = 6, end = 11)) %>%
filter(year == 2019) %>%
mutate(tractID19 = paste0(state,county,tract))%>%
select(tractID19, land_value_ac, land_value_lot, land_cost_share)
View(aei_land)
write_csv(aei_land, output_dir + 'aei_land.csv')
property_cdict <- read_csv(property_cdict_xwalk_csv)
View(property_cdict)
property_cdict <- read_csv(property_cdict_xwalk_csv) %>%
merge(aei_land, by = tractID19, all.x = TRUE)
property_cdict <- read_csv(property_cdict_xwalk_csv) %>%
merge(aei_land, by = 'tractID19', all.x = TRUE)
View(property_cdict)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value_ac = X5, land_value_lot = X6, land_cost_share = X7) %>%
#  mutate(state = str_sub(censusID, start = 1, end = 2)) %>%
#  mutate(county = str_sub(censusID, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(censusID, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
select(tractID19, land_value_ac, land_value_lot, land_cost_share)%>%
mutate(tractID19 = as.numeric(tractID19))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(censusID = X3, year = X4, land_value_ac = X5, land_value_lot = X6, land_cost_share = X7) %>%
filter(year == 2019) %>%
select(tractID19, land_value_ac, land_value_lot, land_cost_share)%>%
mutate(tractID19 = as.numeric(tractID19))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, land_value_ac = X5, land_value_lot = X6, land_cost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
select(tractID19, land_value_ac, land_value_lot, land_cost_share)%>%
mutate(tractID19 = as.numeric(tractID19))
property_cdict <- read_csv(property_cdict_xwalk_csv) %>%
merge(aei_land, by = 'tractID19', all.x = TRUE)
View(property_cdict)
library(glue)
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
select(tractID19, landv_ac, landv_lot, lcost_share)%>%
mutate(tractID19 = as.numeric(tractID19))
aei_land$lcost_share <- as.numeric(sub("%", "", aei_land$lcost_share))/100
write_csv(aei_land, output_dir + "aei_land.csv")
property_cdict <- read_csv(property_cdict_xwalk_csv)
if ("landv_ac" %in% colnames(property_cdict)) {
print("land_value_ac column exists.")
} else {
property_cdict %<>%
merge(aei_land, by = 'tractID19', all.x = TRUE)
write_csv(property_cdict, property_cdict_xwalk_csv)
}
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
select(tractID19, landv_ac, landv_lot, lcost_share)%>%
mutate(tractID19 = as.numeric(tractID19))
library(glue)
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7)
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
mutate(lcost_share0 = ifelse(X9 == "N",lcost_share,NA))%>%
select(tractID19, landv_ac, landv_lot, lcost_share)%>%
mutate(tractID19 = as.numeric(tractID19))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
mutate(lcost_share0 = ifelse(X9 == "N",lcost_share,NA))%>%
select(tractID19, landv_ac, landv_lot, lcost_share,lcost_share0)%>%
mutate(tractID19 = as.numeric(tractID19))
library(glue)
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
mutate(lcost_share0 = ifelse(X9 == "N",lcost_share,NA))%>%
select(tractID19, landv_ac, landv_lot, lcost_share,lcost_share0)%>%
mutate(tractID19 = as.numeric(tractID19))
aei_land$lcost_share <- as.numeric(sub("%", "", aei_land$lcost_share))/100
write_csv(aei_land, output_dir + "aei_land.csv")
property_cdict <- read_csv(property_cdict_xwalk_csv)
if ("landv_ac" %in% colnames(property_cdict)) {
print("land_value_ac column exists.")
} else {
property_cdict %<>%
merge(aei_land, by = 'tractID19', all.x = TRUE)
write_csv(property_cdict, property_cdict_xwalk_csv)
}
View(property_cdict)
colnames(property_cdict)
library(glue)
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
mutate(tractID19 = as.numeric(tractID19))
aei_land$lcost_share <- as.numeric(sub("%", "", aei_land$lcost_share))/100
aei_land %<>% mutate(lcost_share0 = ifelse(X9 == "N",lcost_share,NA))%>%
select(tractID19, landv_ac, landv_lot, lcost_share,lcost_share0)%>%
write_csv(aei_land, output_dir + "aei_land.csv")
View(aei_land)
aei_land %<>% mutate(lcost_share0 = ifelse(X9 == "N",lcost_share,NA))%>%
select(tractID19, landv_ac, landv_lot, lcost_share,lcost_share0)%>%
write_csv(aei_land, output_dir + "aei_land.csv")
aei_land <- read_csv(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - database/raw/land/aei_land.csv"), skip = 1, col_names = FALSE) %>%
rename(tractID19 = X3, year = X4, landv_ac = X5, landv_lot = X6, lcost_share = X7) %>%
#  mutate(state = str_sub(tractID19, start = 1, end = 2)) %>%
#  mutate(county = str_sub(tractID19, start = 4, end = 5)) %>%
#  mutate(tract = str_sub(tractID19, start = 6, end = 11)) %>%
#  mutate(tractID19 = paste0(state,county,tract))%>%
filter(year == 2019) %>%
mutate(tractID19 = as.numeric(tractID19))
aei_land$lcost_share <- as.numeric(sub("%", "", aei_land$lcost_share))/100
aei_land %<>% mutate(lcost_share0 = ifelse(X9 == "N",lcost_share,NA))%>%
select(tractID19, landv_ac, landv_lot, lcost_share,lcost_share0)
write_csv(aei_land, output_dir + "aei_land.csv")
property_cdict <- read_csv(property_cdict_xwalk_csv) %>% select(-landv_ac,-landv_lot,-lcost_share,-lcost_share0)
if ("landv_ac" %in% colnames(property_cdict)) {
print("land_value_ac column exists.")
} else {
property_cdict %<>%
merge(aei_land, by = 'tractID19', all.x = TRUE)
write_csv(property_cdict, property_cdict_xwalk_csv)
}
View(property_cdict)
View(aei_land)
View(property_cdict)
frequency_table(property_cdict$lcost_share)
plot_frequency(property_cdict$lcost_share)
nonparametric_plot(aei_land,'landv_ac','landv_lot',1,99)
lm_result <- lm(landv_ac ~ landv_lot, data = aei_land)
summary(lm_result)
library(glue)
current_user <- Sys.info()["user"]
source(glue("C:/Users/{current_user}/OneDrive - The Pennsylvania State University/2207 - Zoning - exercise/config.r"))
library(mgcv)
library(lfe)
library(sf)
property_current <- readRDS(property_apt_rds)
property_coord_dict <- read.csv(property_cdict_xwalk_csv) %>%
mutate(col1 = as.character((col1)))
coordinates <- st_as_sf(property_current, coords = c("col49", "col48"), crs = 4326)
specific_point <- st_point(c(-71.05804050694815,42.36038876047336))
specific_point <- st_sfc(specific_point, crs = 4326)
specific_point_utm <- st_transform(specific_point, 32619)
coordinates_utm <- st_transform(coordinates, 32619)
property_current$distance <- st_distance(coordinates_utm, specific_point_utm)
property_current$distance <- as.numeric(property_current$distance)
property_current_mod <- property_current %>%
merge(property_coord_dict, by = 'col1') %>%
mutate(dupac = col201/adj_land*43560, pu_size = col202_sum/col201, perland = adj_land/col201)%>%
filter(pu_size<5000, pu_size>500, dupac_eff!= 0)%>%
mutate(eff_minsize = 43560/dupac_eff)%>%
mutate(cutoff = ifelse(eff_minsize*1.10 > perland & eff_minsize < perland,1,0))%>%
mutate(close = ifelse(distance<20000,1,0))
model <- lm(log(perland) ~ log(pu_size) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac), data = property_current_mod)
summary(model)
View(property_current_mod)
property_sale <- property_current_mod %>%
mutate(sale_year = floor(col149/1e4)) %>%
mutate(sale_year_st = as.character(sale_year))
nonparametric_plot(property_sale, 'col149','pu_size',1,99)
nonparametric_plot(property_sale, 'col151','pu_size',1,99)
property_sale <- property_current_mod %>%
mutate(sale_year = floor(col149/1e4)) %>%
mutate(sale_year_st = as.character(sale_year)) %>%
mutate(per_sale_price = col151/col201)
nonparametric_plot(property_sale, 'per_sale_price','pu_size',1,99)
model <- felm(log(per_sale_price) ~ log(pu_size) + cutoff + cutoff*close | sale_year_st , data = property_current_mod)
model <- felm(log(per_sale_price) ~ log(pu_size) + cutoff + cutoff*close | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st, tractID19 , data = property_sale)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st + tractID19 , data = property_sale)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st | tractID19 , data = property_sale)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st | tractID19 , data = property_sale)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
property_current_mod <- property_current %>%
merge(property_coord_dict, by = 'col1') %>%
mutate(dupac = col201/adj_land*43560, pu_size = col202_sum/col201, perland = adj_land/col201)%>%
filter(pu_size<5000, pu_size>500, dupac_eff!= 0)%>%
mutate(eff_minsize = 43560/dupac_eff)%>%
mutate(cutoff = ifelse(eff_minsize*1.5 > perland & eff_minsize < perland,1,0))%>%
mutate(close = ifelse(distance<20000,1,0))
property_sale <- property_current_mod %>%
mutate(sale_year = floor(col149/1e4)) %>%
mutate(sale_year_st = as.character(sale_year)) %>%
mutate(per_sale_price = col151/col201)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
property_current_mod <- property_current %>%
merge(property_coord_dict, by = 'col1') %>%
mutate(dupac = col201/adj_land*43560, pu_size = col202_sum/col201, perland = adj_land/col201)%>%
filter(pu_size<5000, pu_size>500, dupac_eff!= 0)%>%
mutate(eff_minsize = 43560/dupac_eff)%>%
mutate(cutoff = ifelse(eff_minsize*1.05 > perland & eff_minsize < perland,1,0))%>%
mutate(close = ifelse(distance<20000,1,0))
property_sale <- property_current_mod %>%
mutate(sale_year = floor(col149/1e4)) %>%
mutate(sale_year_st = as.character(sale_year)) %>%
mutate(per_sale_price = col151/col201)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac) | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland)  + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- lm(log(perland) ~ log(pu_size) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac), data = property_current_mod)
summary(model)
property_current_mod <- property_current %>%
merge(property_coord_dict, by = 'col1') %>%
mutate(dupac = col201/adj_land*43560, pu_size = col202_sum/col201, perland = adj_land/col201)%>%
filter(pu_size<5000, pu_size>500, dupac_eff!= 0)%>%
mutate(eff_minsize = 43560/dupac_eff)%>%
mutate(cutoff = ifelse(eff_minsize*1.1 > perland & eff_minsize < perland,1,0))%>%
mutate(close = ifelse(distance<20000,1,0))
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + cutoff + distance + I(distance^2) + cutoff*close + log(landv_ac) | sale_year_st , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland)  + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size)  + distance + I(distance^2) + log(landv_ac)+ cutoff*close | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size)  + distance + I(distance^2) + log(landv_ac)+ cutoff | sale_year_st + tractID19 , data = property_sale)
summary(model)
model <- felm(log(per_sale_price) ~ log(pu_size) + log(perland) + distance + I(distance^2) + log(landv_ac)+ cutoff | sale_year_st + tractID19 , data = property_sale)
summary(model)
property_current_mod <- property_current %>%
merge(property_coord_dict, by = 'col1') %>%
mutate(dupac = col201/adj_land*43560, pu_size = col202_sum/col201, perland = adj_land/col201)%>%
filter(pu_size<5000, pu_size>500, dupac_eff!= 0)%>%
mutate(eff_minsize = 43560/dupac_eff)%>%
mutate(cutoff = ifelse(eff_minsize*1.1 > perland & eff_minsize < perland,1,0))%>%
mutate(close = ifelse(distance<20000,1,0))%>%
mutate(zone_id = paste0(dupac_eff, "_", tractID))
property_current_mod <- property_current %>%
merge(property_coord_dict, by = 'col1') %>%
mutate(dupac = col201/adj_land*43560, pu_size = col202_sum/col201, perland = adj_land/col201)%>%
filter(pu_size<5000, pu_size>500, dupac_eff!= 0)%>%
mutate(eff_minsize = 43560/dupac_eff)%>%
mutate(cutoff = ifelse(eff_minsize*1.1 > perland & eff_minsize < perland,1,0))%>%
mutate(close = ifelse(distance<20000,1,0))%>%
mutate(zone_id = paste0(dupac_eff, "_", tractID19))
